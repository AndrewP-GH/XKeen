// Настройки транспортного протокола
// * Это глобальные настройки транспорта. Они используются, если не определены настройки конкретного транспорта в файлах «08_outbounds.json» и «07_inbounds.json» в секции «streamSettings».
// ** Настройки транспорта клиентской и серверной конфигурации должны совпадать
//
###############################################################################################
//
// tcpSettings
// 
// 1. acceptProxyProtocol
// Пример записи: "acceptProxyProtocol": true
// Стандартное значение «false»
//
// Популярные сценарии использования:
// 1.1. Ограничить доступ клиентам, не использующим протокол Proxy
// 1.2. Получить реальный IP и порта клиента, подключаемого к серверу
//
//
// 2. header 
// Пример записи: 
// "header": {
//   "type": "http"
//		"request": {
//			"version": "1.1"
//		},
//		"response": {
//			"version": "1.1",
//		}
//  }
// 
// Секция "type", внутри "header"
// "type": "none"
// Стандартное значение. 
// Выключенная обфускация заголовка HTTP.
//
// "type": "http"
// Включает обфускацию заголовков HTTP.
// Позволяет заменить заголовки HTTP запросов и ответов, чтобы скрыть их настоящее содержимое.
//
//
// Секция "request", внутри "type"— маскировка запросов. 
// * Важно уточнить, что дальнейшие параметры исключительно маскируют заголовок, а не меняют фактическое соединение.
//    Иными словами, если фактическая версия http 3, а в request указана 1.1 — использоваться будет 3, а отображаться 1.1.
//
// Параметр "version" — подменяет версию http
// Возможные параметры: "1.0", "1.1", "2", "3"
// Пример записи "version": "1.1"
//
// Параметр "method" — метод взаимодействия с веб-сервисом
// Рекомендуемые параметры: "GET", "POST"
// Пример записи "method": "GET"
//
// Параметр "path" — указывает на конкретный путь
// Пример: vk.com/example [/example] — и есть path
// Пример записи "path": ["/"]
//
// Секция "headers", внутри "request" — дополнительные параметры заголовка
// Параметр "Host" — указывает на конкретный хост
// Пример записи: "Host": ["www.google.com", "www.yandex.com"]
// 
// Параметр "User-Agent" — указывает на браузер и устройство клиента
// Пример записи: "User-Agent": ["Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36"]
//
// Параметр "Accept-Encoding — указывает на поддержку клиентом методов сжатия
// Возможные параметры: "gzip", "deflate", "br", 
// Пример записи: "Accept-Encoding": ["gzip, deflate"]
//
// Параметр "Connection" — способ соединения после завершения запроса
// Рекомендуемые параметры: "keep-alive", "close", "upgrade"
// Пример записи: "Connection": ["keep-alive"]
//
// Секция "pragma" — дополнительные инструкции серверу
// Пример записи: "Pragma": "no-cache"
// Возможные параметры: 
// "no-cache" — не кэшировать ответы. 
// * Полезно, если Вы хотите получать свежие данные с сервера, а не копии данных из кэша.
// "no-store" — не кэшировать ответы, в том числе и на стороне клиента. 
// * Более строгий вариант no-cache
// "only-if-cached" — исключительно кэшированные ответы. 
// * Если в кэше нет ответа, то вернет 504 (Gateway Timeout)
// "max-age=3600" — кэширует ответ определенное время. 
// * В примере указано 3600 секунд, т.е. 1 час.
// "min-fresh=60" — устанавливает минимальное время, в течении которого запрос будет считаться свежим.
// * Если по истечению этого времени отправить запрос — он будет обработан не из кэша, а получен заново.
//
//
// Секция "response", внутри "type"— маскировка ответов. 
// * Важно уточнить, что дальнейшие параметры исключительно маскируют заголовок, а не меняют фактическое соединение.
//    Иными словами, если фактическая версия http 3, а в response указана 1.1 — использоваться будет 3, а отображаться 1.1.
// 
// Параметр "version" — подменяет версию http
// Возможные параметры: "1.0", "1.1", "2", "3"
// Пример записи "version": "1.1" 
//
// Параметр "status" — подменяет статус сервера.
// Рекомендуемые параметры: "200", "404", "504"
// * Напрямую связан со следующим параметром "reason"
// Пример записи: "status": "200"
//
// Параметр "reason " — комментарий статуса сервера.
// Рекомендуемые параметры: "OK", "Not Found", "Gateway Timeout"
// * Напрямую связан со предыдущим параметром "status"
// Пример записи: "reason": "OK"
//
// Секция "headers", внутри "response" — дополнительные параметры заголовка
// Параметр "Content-Type" — указывает на тип контента, который возвращается в ответе
// Рекомендуемые параметры: "application/octet-stream", "video/mpeg"
// Пример записи: "Content-Type": ["application/octet-stream", "video/mpeg"],
//
// Параметр "Transfer-Encoding" — метод кодирования тела запроса
// Возможные для http/1.1: 
// "chunked" — фрагментация 
// "gzip" — gzip сжатие
// "deflate" — сжатее, но менее эффективное чем gzip
// "br" — похожее сжатие на gzip, с меньшей нагрузкой на ЦП
// "identity" — без сжатия или кодирования
// "sdch"— кодирование при помощи общего словаря
// Возможные для http/2: 
// "hpack" — улучшенный метод кодирования и сжатия
// "huffman" — используется для сжатия бинарных данных, включая hpack
// Все методы http/1.1, http/1
// Возможные для http/3: 
// "qpack" — тот же hpack, но оптимизирован для работы с QUIC и HTTP/3
// все методы http/2, http/1.1, http/1
// Пример записи: "Transfer-Encoding": ["chunked"]
//
// Параметр "Connection" — способ соединения после завершения запроса
// Рекомендуемые параметры: "keep-alive", "close", "upgrade"
// Пример записи: "Connection": ["keep-alive"]
//
// Секция "pragma" — дополнительные инструкции серверу
// Пример записи: "Pragma": "no-cache"
// Возможные параметры: 
// "no-cache" — не кэшировать ответы. 
// * Полезно, если Вы хотите получать свежие данные с сервера, а не копии данных из кэша.
// "no-store" — не кэшировать ответы, в том числе и на стороне клиента. 
// * Более строгий вариант no-cache
// "only-if-cached" — исключительно кэшированные ответы. 
// * Если в кэше нет ответа, то вернет 504 (Gateway Timeout)
// "max-age=3600" — кэширует ответ определенное время. 
// * В примере указано 3600 секунд, т.е. 1 час.
// "min-fresh=60" — устанавливает минимальное время, в течении которого запрос будет считаться свежим.
// * Если по истечению этого времени отправить запрос — он будет обработан не из кэша, а получен заново.
//

{
  "transport": {
    "tcpSettings": {},
    "kcpSettings": {},
    "wsSettings": {},
    "httpSettings": {},
    "quicSettings": {},
    "dsSettings": {},
    "grpcSettings": {}
  }
}